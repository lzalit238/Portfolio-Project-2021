// center any block elements

@mixin push-autoCenter {
  margin {
    left: auto;
    right: auto;
  }
}

//creating scalable elements such as
//images or backgrounds that require a ratio

@mixin responsive-ratio($x, $y, $pseudo) {
  $padding: unquote(($y/$x) * 100 + "%");
  @if $pseudo {
    &:before {
      @include pseudo($pos: relative);
      width: 100%;
    }
  } @else {
    padding-top: $padding;
  }
}

//for main.scss
//@use '../sass/_mixin.scss' as _mixin;
// @include _mixin.push-autoCenter;

//MIXIN WALKTHROUGHS

@mixin fade($type) {
  @if $type == "hide" {
    visibility: hidden;
    opacity: 0;
    transition: visibility 1s opacity 1s;
  } @else if $type == "show" {
    visibility: visible;
    opacity: 1;
    transition: visibility 1s opacity 1s;
  }
}

//font face mixin
@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-name + ".eot");
    src: url($file-name + ".eot?#iefix") format(embedded-opentype)
        url($file-name + ".woff") format("woff"),
      url($file-name + ".ttf") format("truetype"),
      url($file-name + ".svg") format("svg");
    font-weight: $weight;
    font-style: $style;
  }
}

//this is a simple way to define a box
@mixin box($width, $height: $width) {
  width: $width;
  height: $height;
}

//cover my whole background mixin
@mixin cover-background {
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
}
/*
div {
    background-image:url('pic.jpg');
    @include mixin.cover-background();
}
*/

//when you use ::after and ::before
@mixin beforeAfter(
  $width: 100%,
  $height: 100%,
  $display: block,
  $pos: absolute,
  $content: ""
) {
  content: $content;
  display: $display;
  position: $pos;
  @include box($width, $height);
}

//MIXINS FOR DAYS

@mixin change-color($height: 100%) {
}

@mixin position($position, $args) {
  @each $pos in top right bottom left {
    $i: index($args, $pos);
    @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) {
      #{$pos}: nth($args, $i + 1);
    }
  }
  position: $position;
}

@mixin absolute($args: " ") {
  @include position(absolute, $args);
}
@mixin fixed($args: " ") {
  @include position(fixed, $args);
}
@mixin relative($args: " ") {
  @include position(relative, $args);
}

// .menu li {
//   @include absolute(top 100% left 0);
// }
// .sticky-bar {
//   @include fixed(top 0 left 0);
// }
// .submenu {
//   @include relative();
// }

$phone-wide: 480px;
$phablet: 560px;
$tablet-small: 640px;
$tablet: 768px;
$large: 1024px;
$desktop: 1280px;
$desktop-wide: 1440px;

@mixin phone-wide {
  @media only screen and (min-width: $phone-wide) {
    @content;
  }
}
@mixin tablet {
  @media only screen and (min-width: $tablet) {
    @content;
  }
}
@mixin tablet-small {
  @media only screen and (min-width: $tablet-small) {
    @content;
  }
}
@mixin large {
  @media only screen and (min-width: $large) {
    @content;
  }
}
@mixin desktop {
  @media only screen and (min-width: $desktop) {
    @content;
  }
}
@mixin desktop-wide {
  @media only screen and (min-width: $desktop-wide) {
    @content;
  }
}

@mixin fade($type) {
  @if $type == "hide" {
    visibility: hidden;
    opacity: 0;
    transition: $transition;
    //transition: visibility 1s opacity 1s;
  } @else if $type == "slow" {
    visibility: visible;
    opacity: 1;
    transition: $transition;
  }
}

@mixin input-placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}

@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-name + ".eot");
    src: url($file-name + ".eot?#iefix") format("embedded-opentype"),
      url($file-name + ".woff") format("woff"),
      url($file-name + ".ttf") format("truetype"),
      url($file-name + ".svg") format("svg");
    font-weight: $weight;
    font-style: $style;
  }
}

// @include font-face("MyFont", './base/typography/myfont.ttf', $style: underline)
// div{
//   font-family: "MyFont";
// }

@mixin text-shorten {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

//creating css triangles
@mixin css-triangle(
  $color,
  $direction,
  $size: 6px,
  $position: absolute,
  $round: false
) {
  @include pseudo($pos: $position);
  width: 0;
  height: 0;
  @if $round {
    border-radius: 3px;
  }
  @if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round($size / 2.5);
  } @else if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round($size / 2.5);
  } @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  } @else if $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}

@mixin animateDelay($delay: 100ms) {
  @for $i from 1 through 50 {
    &:nth-child(#{$i}) {
      transition-delay: $delay * $i;
    }
  }
} //adds delay to children

//table layout
@mixin tableLayout {
}
